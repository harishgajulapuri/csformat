<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Codingarena]]></title>
  <link href="http://manusajith.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://manusajith.github.io/"/>
  <updated>2013-11-25T13:59:17+05:30</updated>
  <id>http://manusajith.github.io/</id>
  <author>
    <name><![CDATA[Manu S Ajith]]></name>
    <email><![CDATA[neo@codingarena.in]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fix for ruby 1.8.7 incompatibity - undefined method for Enumerable bug]]></title>
    <link href="http://manusajith.github.io/blog/2013/11/25/fix-for-ruby-1-dot-8-7-incompatibity-undefined-method-for-enumerable-bug/"/>
    <updated>2013-11-25T13:55:31+05:30</updated>
    <id>http://manusajith.github.io/blog/2013/11/25/fix-for-ruby-1-dot-8-7-incompatibity-undefined-method-for-enumerable-bug</id>
    <content type="html"><![CDATA[<p>Recently I was working on a Rails 1.1.2 application which used Ruby version 1.8.6. I was trying to make the application work on Ruby 1.8.7, but I found that my 1.1.2 application developed in ruby 1.8.6 are not working in ruby 1.8.7.</p>

<p>The attachment_fu plugin was throwing a weird error,</p>

<pre><code>undefined method `[]' for #&lt;Enumerable::Enumerator:0xb70a72d0&gt;
</code></pre>

<p>and it was really hard to find what was causing the issue.</p>

<!--more -->


<p>From lot of search on google, I found that its issue with ruby 1.8.7 incomatibility. There is an incompatibility issue between Ruby 1.8.7’s String#chars method and the way ActiveSupport::Multibyte::Chars works.</p>

<p>Then, I started searching fix / solution for this incompatibity.
And, Finally I got solution.</p>

<p>If you use any ActionView helper methods such as truncate and also happen to be running ruby 1.8.7 with Rails > 2.0.2 Insert this into the top of your environment.rb:</p>

<pre><code>unless '1.9'.respond_to?(:force_encoding) 
  String.class_eval do 
   begin 
    remove_method :chars 
   rescue NameError 
    # OK 
   end 
 end
end
</code></pre>

<p>&mdash;</p>

<p>Manu S Ajith</p>

<p><a href="http://twitter.com/manusajith/" title="Twitter">@manusajith</a> | <a href="http://github.com/manusajith/" title="Twitter">Git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mathjax-rails]]></title>
    <link href="http://manusajith.github.io/blog/2013/11/22/mathjax-rails/"/>
    <updated>2013-11-22T03:08:06+05:30</updated>
    <id>http://manusajith.github.io/blog/2013/11/22/mathjax-rails</id>
    <content type="html"><![CDATA[<p>Ever wanted to include Mathematics equations in your rails application and wondered how to implement it ?. The following gem will help to implement MathJax into your rails application without much fuzz.</p>

<!--more-->


<h1>MathJax-Rails</h1>

<p>We are living in an age, where displaying math on web pages is never hard, thanks to the great work of <a href="https://github.com/mathjax/MathJax">MathJax</a>.</p>

<p>To quote the description from its official website,</p>

<blockquote><p><a href="https://github.com/mathjax/MathJax">MathJax</a> is an open source JavaScript display engine for mathematics that works in all modern browsers.</p>

<p>No more setup for readers. No more browser plugins. No more font installations… It just works.</p></blockquote>

<h2>Why bother another gem?</h2>

<p>Integrating MathJax into a rails project however could be a pain. MathJax is HUGE. It makes your project folder swollen very much, because of the excessive amount of files contained in this package. Including mathjax inside your developing directory makes your TextMate less responsive, because when TextMate loses focus and then regains focus, it will scan the whole directory structure for change.</p>

<p>Another problem is, where to put? Put into <code>public</code> does not seem the best practice, since beginning with rails 3.1 <code>public</code> is by default ignored in production environment. Plus it is big, when using git, it leaves you no choice but to throw mathjax inside .gitignore, which makes sharing across developers less painless.</p>

<h2>So?</h2>

<p>That&rsquo;s the time when mathjax-rails comes into play!</p>

<ul>
<li>It maintains MathJax at a system-wide directory.</li>
<li>By simply including mathjax-rails in your Gemfile, all your rails app can benefit from MathJax immediately.</li>
<li>You can control the version of MathJax by controlling the version of mathjax-rails, which is done simply via bundler.</li>
</ul>


<h2>Which version of MathJax does it use?</h2>

<p>We maintain mathjax-rails to always use the latest version of stable MathJax realeases.</p>

<p>To see the actual version, check the constant Mathjax::Rails::MATHJAXVERSION.</p>

<h2>Installation</h2>

<p>Add this line to your application&rsquo;s Gemfile:</p>

<pre><code>gem 'mathjax-rails'
</code></pre>

<p>And then execute:</p>

<pre><code>$ bundle
</code></pre>

<p>Or install it yourself as:</p>

<pre><code>$ gem install mathjax-rails
</code></pre>

<h2>Usage</h2>

<p>add the following to config/routes.rb (you can change the name of course)</p>

<p><code>ruby
mathjax 'mathjax'
</code></p>

<p>add the script tag inside app/views/layouts/application.html.erb</p>

<p><code>rhtml
&lt;%= mathjax_tag %&gt;
</code></p>

<p>and it is done!</p>

<p>To try it, write a simple formula, for example,</p>

<p>  [\int_a<sup>b</sup> f(x) dx=F(b)-F(a)]</p>

<h2>Configuration</h2>

<p>By default the <code>TeX-AMS_HTML-full.js</code> is loaded as the configuration file.</p>

<p>If you do not want any configuration file to be loaded:</p>

<p><code>rhtml
&lt;%= mathjax_tag :config=&gt;false %&gt;
</code>
If you want to load another configuration file, say <code>Accessible-full.js</code>:</p>

<p><code>rhtml
&lt;%= mathjax_tag :config=&gt;'Accessible-full.js' %&gt;
</code>
Additional configuration can be added directly before mathjax_tag, for example:</p>

<p>``` rhtml</p>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
   tex2jax: {
     inlineMath: [ ['$','$'] ],
     processEscapes: true
   }
  });
</script>


<p>&lt;%= mathjax_tag %>
```</p>

<p>For more options please consult the MathJax documentation.</p>

<h2>What did it do to my rails project</h2>

<p>Three simple things: it adds 1 controller <code>MathjaxRailsController</code>; 1 helper method <code>mathjax_tag</code>; 1 router method <code>mathjax</code>.</p>

<p>It won&rsquo;t pollute your rails project more than the above three.</p>

<h2>Note</h2>

<ul>
<li><p>If you have a fast CDN service at hand, you don&rsquo;t need this gem. Putting your MathJax at CDN is probably the best choice.</p></li>
<li><p>A new version of mathjax-rails was released today with support for Rails 4.x apps.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Specific version of rails before creating  a new app]]></title>
    <link href="http://manusajith.github.io/blog/2013/06/27/use-specific-version-of-rails-before-creating-a-new-app/"/>
    <updated>2013-06-27T01:56:00+05:30</updated>
    <id>http://manusajith.github.io/blog/2013/06/27/use-specific-version-of-rails-before-creating-a-new-app</id>
    <content type="html"><![CDATA[<p>You want to develop with the latest version of Rails but you have an existing application that
uses an older version that you are not ready to bring up to date. What do you do?</p>

<!--more-->


<p>By default gem will keep older versions of installed gems until you tell it not to. To see what you have installed:</p>

<pre><code>$ gem list --local

[...]

rails (4.0.0.beta1, 3.2.13)
</code></pre>

<p>To use a specific version in your application add a line like this to the bottom of your config/environment.rb file</p>

<pre><code>RAILS_GEM_VERSION = '3.2.13'
</code></pre>

<p>That should just work.</p>

<p>You can get rid of old versions of gems with this command:</p>

<pre><code>$ gem cleanup
</code></pre>

<p>If you remove an old version by mistake you can always reinstall it with this gem command:</p>

<pre><code>$ sudo gem install rails --version 3.2.12
</code></pre>

<p>When you are ready to move your application to the current version of rails then remove the line from environment.rb and bring your application files up to date with:</p>

<pre><code>$ rake rails:update
</code></pre>

<p>Now, let&rsquo;s say you have installed the current version of Rails (say, 4.0.0.beta1) but you need to build an application that uses an older version. According to &lsquo;rails &mdash;help&rsquo; there is no way to specify a version to use. It turns out that there is a hidden option available that does this:</p>

<pre><code>$ rails _3.2.13_ myapp
</code></pre>

<p>&mdash;</p>

<p>Manu S Ajith</p>

<p><a href="http://twitter.com/manusajith/" title="Twitter">@manusajith</a> | <a href="http://github.com/manusajith/" title="Twitter">Git</a> |</p>
]]></content>
  </entry>
  
</feed>
