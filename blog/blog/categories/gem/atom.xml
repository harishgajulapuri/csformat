<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | Codingarena]]></title>
  <link href="http://manusajith.github.io/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://manusajith.github.io/"/>
  <updated>2014-01-20T22:35:43+05:30</updated>
  <id>http://manusajith.github.io/</id>
  <author>
    <name><![CDATA[Manu S Ajith]]></name>
    <email><![CDATA[neo@codingarena.in]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[lunchy: A friendly wrapper for OS X launchctl]]></title>
    <link href="http://manusajith.github.io/blog/2014/01/20/lunchy-a-friendly-wrapper-for-os-x-launchctl/"/>
    <updated>2014-01-20T22:27:17+05:30</updated>
    <id>http://manusajith.github.io/blog/2014/01/20/lunchy-a-friendly-wrapper-for-os-x-launchctl</id>
    <content type="html"><![CDATA[<p>If you run OS X, you’ve probably encountered some frustration with Apple’s launchctl command line options when starting, stopping, and restarting your launchd daemons. Whereas most things Apple are minimalist, launchctl options are quite verbose.</p>

<!--more -->


<p>For example, how many times have you installed a Homebrew package only to get met with something like:</p>

<p>If this is your first install, automatically load on login with:</p>

<pre><code>cp /usr/local/Cellar/mongodb/1.6.5-x86_64/org.mongodb.mongod.plist ~/Library/LaunchAgents
launchctl load -w ~/Library/LaunchAgents/org.mongodb.mongod.plist
</code></pre>

<p>If this is an upgrade and you already have the org.mongodb.mongod.plist loaded:</p>

<pre><code>launchctl unload -w ~/Library/LaunchAgents/org.mongodb.mongod.plist
cp /usr/local/Cellar/mongodb/1.6.5-x86_64/org.mongodb.mongod.plist ~/Library/LaunchAgents
launchctl load -w ~/Library/LaunchAgents/org.mongodb.mongod.plist
</code></pre>

<p>Or start it manually:</p>

<pre><code>mongod run --config /usr/local/Cellar/mongodb/1.6.5-x86_64/mongod.conf
</code></pre>

<p>So to crank up Mongo you want me to pass that entire path to launchctl?</p>

<p>Lunchy – “Start your agents and go to lunch”
Thank goodness there’s Lunchy from Mike Perham. Lunchy simplifies the command line interface to launchctl. To get started, install the gem:</p>

<p>gem install lunchy
Now we can list all of our agents with ls</p>

<pre><code>$lunchy ls
  com.adobe.AAM.Updater-1.0
  com.adobe.CS5ServiceManager
  com.apple.FTMonitor
  com.apple.apsd-ft
  com.apple.imagent
  com.apple.marcoagent
  com.bjango.istatlocal
  com.embercode.TVShowsHelper
  com.github.dotjs
  com.google.keystone.agent
  com.mysql.mysqld
  com.wacom.pentablet
  net.culater.SIMBL.Agent
  net.sourceforge.tvshows
  org.mongodb.mongod
  org.postgresql.postgres
  ws.agile.1PasswordAgent
</code></pre>

<p>… and start MongoDB with</p>

<pre><code>lunchy start mongo
</code></pre>

<p>To see the full range of options, just type lunchy with no arguments:</p>

<p>Supported commands:</p>

<pre><code>ls [pattern]       Show the list of installed agents, with optional [pattern] filter
start [pattern]    Start the first agent matching [pattern]
stop [pattern]     Stop the first agent matching [pattern]
restart [pattern]  Stop and start the first agent matching [pattern]
status [pattern]   Show the PID and label for all agents, with optional [pattern] filter
</code></pre>

<p>Got an idea to improve upon Lunchy? Go ahead and fork the project</p>

<p><a href="http://github.com/mperham/lunchy">Source on GitHub</a></p>

<p><a href="http://thechangelog.com/lunchy-a-friendly-wrapper-for-launchctl/">Source: TheChangelog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mathjax-rails]]></title>
    <link href="http://manusajith.github.io/blog/2013/11/22/mathjax-rails/"/>
    <updated>2013-11-22T03:08:06+05:30</updated>
    <id>http://manusajith.github.io/blog/2013/11/22/mathjax-rails</id>
    <content type="html"><![CDATA[<p>Ever wanted to include Mathematics equations in your rails application and wondered how to implement it ?. The following gem will help to implement MathJax into your rails application without much fuzz.</p>

<!--more-->


<h1>MathJax-Rails</h1>

<p>We are living in an age, where displaying math on web pages is never hard, thanks to the great work of <a href="https://github.com/mathjax/MathJax">MathJax</a>.</p>

<p>To quote the description from its official website,</p>

<blockquote><p><a href="https://github.com/mathjax/MathJax">MathJax</a> is an open source JavaScript display engine for mathematics that works in all modern browsers.</p>

<p>No more setup for readers. No more browser plugins. No more font installations… It just works.</p></blockquote>

<h2>Why bother another gem?</h2>

<p>Integrating MathJax into a rails project however could be a pain. MathJax is HUGE. It makes your project folder swollen very much, because of the excessive amount of files contained in this package. Including mathjax inside your developing directory makes your TextMate less responsive, because when TextMate loses focus and then regains focus, it will scan the whole directory structure for change.</p>

<p>Another problem is, where to put? Put into <code>public</code> does not seem the best practice, since beginning with rails 3.1 <code>public</code> is by default ignored in production environment. Plus it is big, when using git, it leaves you no choice but to throw mathjax inside .gitignore, which makes sharing across developers less painless.</p>

<h2>So?</h2>

<p>That&rsquo;s the time when mathjax-rails comes into play!</p>

<ul>
<li>It maintains MathJax at a system-wide directory.</li>
<li>By simply including mathjax-rails in your Gemfile, all your rails app can benefit from MathJax immediately.</li>
<li>You can control the version of MathJax by controlling the version of mathjax-rails, which is done simply via bundler.</li>
</ul>


<h2>Which version of MathJax does it use?</h2>

<p>We maintain mathjax-rails to always use the latest version of stable MathJax realeases.</p>

<p>To see the actual version, check the constant Mathjax::Rails::MATHJAXVERSION.</p>

<h2>Installation</h2>

<p>Add this line to your application&rsquo;s Gemfile:</p>

<pre><code>gem 'mathjax-rails'
</code></pre>

<p>And then execute:</p>

<pre><code>$ bundle
</code></pre>

<p>Or install it yourself as:</p>

<pre><code>$ gem install mathjax-rails
</code></pre>

<h2>Usage</h2>

<p>add the following to config/routes.rb (you can change the name of course)</p>

<p><code>ruby
mathjax 'mathjax'
</code></p>

<p>add the script tag inside app/views/layouts/application.html.erb</p>

<p><code>rhtml
&lt;%= mathjax_tag %&gt;
</code></p>

<p>and it is done!</p>

<p>To try it, write a simple formula, for example,</p>

<p>  [\int_a<sup>b</sup> f(x) dx=F(b)-F(a)]</p>

<h2>Configuration</h2>

<p>By default the <code>TeX-AMS_HTML-full.js</code> is loaded as the configuration file.</p>

<p>If you do not want any configuration file to be loaded:</p>

<p><code>rhtml
&lt;%= mathjax_tag :config=&gt;false %&gt;
</code>
If you want to load another configuration file, say <code>Accessible-full.js</code>:</p>

<p><code>rhtml
&lt;%= mathjax_tag :config=&gt;'Accessible-full.js' %&gt;
</code>
Additional configuration can be added directly before mathjax_tag, for example:</p>

<p>``` rhtml</p>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
   tex2jax: {
     inlineMath: [ ['$','$'] ],
     processEscapes: true
   }
  });
</script>


<p>&lt;%= mathjax_tag %>
```</p>

<p>For more options please consult the MathJax documentation.</p>

<h2>What did it do to my rails project</h2>

<p>Three simple things: it adds 1 controller <code>MathjaxRailsController</code>; 1 helper method <code>mathjax_tag</code>; 1 router method <code>mathjax</code>.</p>

<p>It won&rsquo;t pollute your rails project more than the above three.</p>

<h2>Note</h2>

<ul>
<li><p>If you have a fast CDN service at hand, you don&rsquo;t need this gem. Putting your MathJax at CDN is probably the best choice.</p></li>
<li><p>A new version of mathjax-rails was released today with support for Rails 4.x apps.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
